# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import Qt,QPoint,QEvent
import os
import cv2
import numpy as np
# from DraggableGraphicsView import DraggableGraphicsView
from Labeling_Tool import *


### Pyqt
import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

### BASE
import os
from datetime import datetime

### DATABASE
import pandas as pd

### YOLO
from pathlib import Path
import cv2
import torch
from numpy import random
import shutil
from glob import glob
import os
from datetime import datetime
import time
import pandas as pd
import re
import fsspec



### 이미지 자체 휠 확대 축소 및 마우스 끌고 잡기 가능     
class DraggableGraphicsView(QGraphicsView):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setRenderHint(QPainter.Antialiasing)
        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)
        self.setScene(QGraphicsScene())
        self.mode = 0
        self.setDragMode(QGraphicsView.ScrollHandDrag)
        self.rect_items = []  # 그려진 직사각형 아이템을 저장하는 리스트
        self.clss_items = []
        self.active_rect_item = None  # 현재 활성화된 직사각형 아이템
        self.previous_mouse_pos = None  # 이전 마우스 위치를 저장하여 이동 거리 계산에 사용
        self.trigger = 0
        self.default_pen = QPen()  # 원래의 펜 속성을 저장하는 변수
        self.default_brush = QBrush()  # 원래의 브러시 속성을 저장하는 변수
        self.corner_points = []  # 코너 포인트를 저장하는 리스트
        self.copied_rect = None  # 복사된 직사각형 속성을 저장하는 변수
        self.copied_clss = None
        self.active_corner_point = None
        self.path = None
        self.clss = 0
        self.timer = QTimer(self)
        self.trigger2 = 0
        
    
            
    def load_bbox(self,path) :
        image_width = self.pixmap.width()
        image_height= self.pixmap.height()
        try :
            results = []
            with open(path, 'r') as file:
                # 파일 전체 내용 읽기
                content = file.read()
                # 공백을 기준으로 잘라서 리스트로 반환
                content = content.split()
                # 5개 (라벨, x, y, w, h, conf) 기준 자르기
                for _ in range(int(len(content) / 5)) :
                    results.append(content[_ * 5: (_ +1) * 5])  
                    results[_][1] = float(results[_][1]) * image_width # x
                    results[_][2] = float(results[_][2]) * image_height # y
                    results[_][3] = float(results[_][3]) * image_width # w
                    results[_][4] = float(results[_][4]) * image_height # h
                for rect_data in results:
                    clss, x, y, width, height = rect_data
                    clss_idx = int(clss)
                    x, y, width, height = self.Inverse_getRectCoordinates(x,y,width,height) # center x, center y, width, height -> start x, start y, width, height로 역변환
                    rect_item = QGraphicsRectItem(QRectF(x, y, width, height))
                    self.scene().addItem(rect_item)
                    text = QGraphicsTextItem(self.clist[clss_idx],parent=rect_item)
                    text.setFont(QtGui.QFont("Arial", 10))  # 폰트 이름과 크기 설정
                    text.setDefaultTextColor(QColor(255, 0, 0))  # 텍스트 색상을 빨간색으로 설정
                    text.setPos(rect_item.rect().topLeft())
                    self.scene().addItem(text)
                    self.rect_items.append(rect_item)
                    self.clss_items.append(clss)
            file.close()
        except :
            pass
    def Inverse_getRectCoordinates(self,x,y,w,h):
        sx = x - w / 2
        sy = y - h /2 
        return sx, sy, w, h
    
    
    def setMode(self, mode):
        self.mode = mode
        if mode == 1 or mode == 3 :
            self.setDragMode(QGraphicsView.NoDrag)
        else :
            self.setDragMode(QGraphicsView.ScrollHandDrag)
            
    def convert_to_yolo(self,x, y, width, height):
        image_width = self.pixmap.width()
        image_height= self.pixmap.height()
        yolo_x = x / image_width
        yolo_y = y / image_height
        yolo_width = width / image_width
        yolo_height = height / image_height
        return yolo_x, yolo_y, yolo_width, yolo_height
            
    
    def SaveRectItem(self,path) :
        if self.rect_items is not None :
            rect_items_copy = self.rect_items[:]
            clss_items_copy = self.clss_items[:]
            with open(path,'w') as file :
                for idx,rect_item in enumerate(rect_items_copy) :
                    rect = rect_item.rect()
                    x = rect.x()
                    y = rect.y()
                    width = rect.width()
                    height = rect.height() 
                    x, y, width, height = self.yolo_center(x,y,width,height) # center x, center y, width, height -> start x, start y, width, height로 역변환
                    x, y, width, height = self.convert_to_yolo(x,y,width,height)
                    file.write(f"{clss_items_copy[idx]} {x} {y} {width} {height} \n")
            file.close()
            rect_items_copy = []
            clss_items_copy = []
    
    def class_name(self,clss) :
        self.clss = clss
                     

    def mousePressEvent(self, event):
        super().mousePressEvent(event)
        if self.mode == 1:
            if self.active_rect_item is not None:
                self.active_rect_item = None
            self.begin = self.mapToScene(event.pos())
            rect_item = QGraphicsRectItem()
            rect_item.setToolTip(self.clist[self.clss])
            self.scene().addItem(rect_item)
            self.active_rect_item = rect_item
            self.previous_mouse_pos = event.pos()
        elif self.active_rect_item is not None and self.trigger== 1:
            self.setMode(3)
            self.trigger= 0
            cursor_pos = self.mapToScene(event.pos())
            for corner_point in self.corner_points:
                if corner_point.contains(corner_point.mapFromScene(cursor_pos)):
                    self.setMode(4)  # 드래그 모드로 변경
                    self.active_corner_point = corner_point
                    break
       
            
    def mouseMoveEvent(self, event):
        super().mouseMoveEvent(event)
        if self.mode == 1 and self.active_rect_item is not None:
            if event.buttons() == Qt.LeftButton:
                self.end = self.mapToScene(event.pos())
                rect = QRectF(self.begin, self.end).normalized()
                if self.trigger2 == 0 :
                    text = QGraphicsTextItem(self.clist[self.clss],parent=self.active_rect_item)
                    text.setFont(QtGui.QFont("Arial", 10))  # 폰트 이름과 크기 설정
                    text.setDefaultTextColor(QColor(255, 0, 0))  # 텍스트 색상을 빨간색으로 설정
                    text.setPos(rect.topLeft())
                    self.scene().addItem(text)
                    self.trigger2 += 1
                self.active_rect_item.setRect(rect)
                     
        elif self.mode == 0  :
            # Check if the mouse cursor is inside any of the rectangle items
            cursor_pos = self.mapToScene(event.pos())
            for rect_item in self.rect_items:
                try :
                    if rect_item.rect().contains(cursor_pos):
                        self.active_rect_item = rect_item
                        self.previous_mouse_pos = event.pos()
                        self.trigger = 1
                        rect_item.setPen(QPen(QColor(255, 0, 0, 127), 2))  # 빨간색 투명도 조정 (0~255 사이의 값)
                        rect_item.setBrush(QColor(255, 0, 0, 127))
                        self.createCornerPoints(rect_item)
                        break
                    else:
                        self.trigger = 0
                        if self.active_rect_item is not None and self.mode != 1:
                            self.active_rect_item.setPen(self.default_pen)
                            self.active_rect_item.setBrush(self.default_brush)
                            self.removeCornerPoints()
                except :
                    pass
                
        elif self.mode == 3 and self.active_rect_item is not None and self.mode != 1:
            # Move the active rectangle item
            if self.active_rect_item in self.rect_items:
                index = self.rect_items.index(self.active_rect_item)
                self.rect_items.remove(self.active_rect_item)
                del self.clss_items[index]
            delta = self.mapToScene(event.pos()) - self.mapToScene(self.previous_mouse_pos)
            rect = self.active_rect_item.rect().translated(delta.x(), delta.y())
            for child in self.active_rect_item.childItems():
                if isinstance(child, QGraphicsTextItem):
                    child.setPos(rect.topLeft())
            self.active_rect_item.setRect(rect)
            self.previous_mouse_pos = event.pos()
            self.updateCornerPoints(self.active_rect_item)
        if self.mode == 4 :
                if self.active_rect_item in self.rect_items:
                    index = self.rect_items.index(self.active_rect_item)
                    self.rect_items.remove(self.active_rect_item)
                    del self.clss_items[index]
                delta = self.mapToScene(event.pos()) - self.mapToScene(self.previous_mouse_pos)
                self.previous_mouse_pos = event.pos()
                self.adjustRectSize(self.active_corner_point, delta)
    
    def mouseReleaseEvent(self, event):
        super().mouseReleaseEvent(event)
        if self.mode != 0 :
            coordinates = self.getRectCoordinates()
            if coordinates is not None:
                x, y, width, height = coordinates
                print("Rectangle coordinates:", x, y, width, height)
        if self.mode == 1:
            self.rect_items.append(self.active_rect_item)
            self.clss_items.append(self.clss)
            self.active_rect_item = None
            self.previous_mouse_pos = None
        if self.mode == 3:
            self.rect_items.append(self.active_rect_item)
            self.clss_items.append(self.clss)
            self.active_rect_item = None
        if self.mode == 4 :
            self.rect_items.append(self.active_rect_item)
            self.clss_items.append(self.clss)
            self.active_corner_point = None
        self.trigger2 = 0
        self.setMode(0)  # After releasing the mouse button, reset the mode
    
    def removeCornerPoints(self):
        """
        Remove the corner points from the scene.
        """
        for corner_point in self.corner_points:
            self.scene().removeItem(corner_point)
        self.corner_points = [] 

    def adjustRectSize(self, corner_point, delta):
        rect = self.active_rect_item.rect()
        if corner_point == self.corner_points[0]:  # Top-left corner
            rect.setTopLeft(rect.topLeft() + delta)
        elif corner_point == self.corner_points[1]:  # Top-right corner
            rect.setTopRight(rect.topRight() + delta)
        elif corner_point == self.corner_points[2]:  # Bottom-left corner
            rect.setBottomLeft(rect.bottomLeft() + delta)
        elif corner_point == self.corner_points[3]:  # Bottom-right corner
            rect.setBottomRight(rect.bottomRight() + delta)
        self.active_rect_item.setRect(rect)
        self.updateCornerPoints(self.active_rect_item)
    
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Delete:
            self.deleteActiveRectItem()
        elif event.key() == Qt.Key_C and event.modifiers() == Qt.ControlModifier:
            self.copyActiveRectItem()
        elif event.key() == Qt.Key_V and event.modifiers() == Qt.ControlModifier:
            self.pasteRectItem()
            # Paste the copied rectangle and go into press mode
        elif event.key() == Qt.Key_X and event.modifiers() == Qt.ControlModifier:
            self.copyActiveRectItem()
            self.timer.start(100)
            self.deleteActiveRectItem() 
        else:
            super().keyPressEvent(event)   
   
    def createCornerPoints(self, rect_item):
        """
        Create corner points for the given rectangle item.
        """
        rect = rect_item.rect()
        self.removeCornerPoints()  # Remove previous corner points
        self.corner_points = []

        for i in range(4):
            th = 40
            corner_point = QGraphicsEllipseItem()
            corner_point.setRect(-th/2, -th/2, th, th)  # Set size of corner point
            corner_point.setFlag(QGraphicsItem.ItemIsMovable)
            corner_point.setPen(QPen(QColor(0, 0, 255, 127), 2))  # Set color of corner point
            corner_point.setBrush(QColor(0, 0, 255, 127))

            if i == 0:  # Top-left corner
                corner_point.setPos(rect.topLeft())
            elif i == 1:  # Top-right corner
                corner_point.setPos(rect.topRight())
            elif i == 2:  # Bottom-left corner
                corner_point.setPos(rect.bottomLeft())
            elif i == 3:  # Bottom-right corner
                corner_point.setPos(rect.bottomRight())
            
            self.scene().addItem(corner_point)
            self.corner_points.append(corner_point)

    def updateCornerPoints(self, rect_item):
        """
        Update the positions of the corner points according to the given rectangle item.
        """
        rect = rect_item.rect()

        if len(self.corner_points) == 4:
            self.corner_points[0].setPos(rect.topLeft())
            self.corner_points[1].setPos(rect.topRight())
            self.corner_points[2].setPos(rect.bottomLeft())
            self.corner_points[3].setPos(rect.bottomRight())

    def getRectCoordinates(self):
        if self.active_rect_item is not None:
            try:
                rect = self.active_rect_item.rect()
                center_x = rect.x() + rect.width() / 2
                center_y = rect.y() + rect.height() /2 
                return center_x, center_y, rect.width(), rect.height()
            except RuntimeError:
                return None
        else:
            return None
        
    def yolo_center(self,x,y,w,h):
        cx = x + w/2 
        cy = y+ h/2 
        return cx, cy, w, h
    
    

    def deleteActiveRectItem(self):
        if self.active_rect_item is not None:
            # 먼저 활성 사각형의 속성을 복사
            self.copyActiveRectItem()
            # 활성 사각형을 삭제
            self.scene().removeItem(self.active_rect_item)
            if self.active_rect_item in self.rect_items:
                index = self.rect_items.index(self.active_rect_item)
                self.rect_items.remove(self.active_rect_item)
                del self.clss_items[index]
            self.active_rect_item = None
            # 마지막에 제거 되지 않은 점을 제거.
            self.removeCornerPoints()

    def copyActiveRectItem(self):
        if self.active_rect_item is not None:
            self.copied_rect = self.active_rect_item.rect()
            self.copied_clss = self.clss

    def drawBackground(self, painter, rect):
        super().drawBackground(painter, rect)
        if self.mode == 2 and self.active_rect_item is not None:
            pen = QPen(QColor(255, 0, 0), 2)
            painter.setPen(pen)
            painter.setBrush(QBrush(QColor(255, 0, 0, 50)))
            painter.drawRect(self.active_rect_item.rect())

    def pasteRectItem(self):
        if self.copied_rect is not None:
            # 전역 커서 위치를 로컬 커서 위치로 변환
            local_cursor_pos = self.mapFromGlobal(QCursor.pos())
            scene_cursor_pos = self.mapToScene(local_cursor_pos)

            # 현재 직사각형의 크기를 가져오기
            rect_size = self.copied_rect.size()

            # 새 직사각형의 좌상단 점을 계산
            new_top_left = scene_cursor_pos - QPointF(rect_size.width() * 0.5, rect_size.height() * 0.5)

            # 마우스 커서 위치에 새로운 직사각형을 생성
            new_rect = QRectF(new_top_left, rect_size)

            # 새로운 직사각형 아이템을 생성하고 장면에 추가
            rect_item = QGraphicsRectItem(new_rect)
            self.scene().addItem(rect_item)
            text = QGraphicsTextItem(self.clist[self.clss],parent=rect_item)
            text.setFont(QtGui.QFont("Arial", 10))  # 폰트 이름과 크기 설정
            text.setDefaultTextColor(QColor(255, 0, 0))  # 텍스트 색상을 빨간색으로 설정
            text.setPos(rect_item.rect().topLeft())
            self.scene().addItem(text)
            self.rect_items.append(rect_item)
            self.clss_items.append(self.clss)

            # 새로운 직사각형 아이템을 활성 아이템으로 설정
            self.active_rect_item  = rect_item

    def clearRectItems(self):
        self.rect_items = []
        self.active_rect_item = None

    def wheelEvent(self, event):
        factor = 1.2
        if event.angleDelta().y() > 0:
            self.zoomIn(factor)
        else:
            self.zoomOut(factor)

    def zoomIn(self, factor):
        self.scale(factor, factor)

    def zoomOut(self, factor):
        self.scale(1 / factor, 1 / factor)
    
    def setImage(self, pixmap):
        self.clss_items = []
        self.rect_items = []
        self.scene().clear()
        item = QGraphicsPixmapItem(pixmap.scaled(640, 640, Qt.AspectRatioMode.KeepAspectRatio))
        self.scene().addItem(item)
        self.fitImageInView(item)

    def fitImageInView(self, item):
        rect = item.boundingRect()
        print(rect)
        self.setSceneRect(rect)
        self.fitInView(rect, Qt.KeepAspectRatio)
    
    def pixmap_size(self,pixmap) :
        self.pixmap = pixmap
    
    def Clist(self,clist) :
        self.clist = clist
        


class Ui_Dialog(QMainWindow):
    
    def __init__(self) :
        super().__init__()
        self.root_path = ''
        self.clss = -1
        self.h_size = 640
        self.w_size = 640
        self.beginpoint = None
        self.endpoint = None
        self.file_name = None
        self.mode_on = 'Auto-Labeling (ON)'
        self.mode_off = 'Auto-Labeling (Off)'
        self.mode = self.mode_off
        
    
    def create_folder(self,directory):
    # 폴더 생성 함수
        try:
            if not os.path.exists(directory):
                os.makedirs(directory)
        except OSError:
            self.textWidget.appendPlainText('Error: Creating directory. ' + directory)
    
    def onButtonClicked(self):
        # When the button is clicked, set mode to 1
        self.label.setMode(1)
    
    def setupUi(self, Dialog):
        
        Dialog.setObjectName("Dialog")
        Dialog.resize(1500, 1200)
        cnt = 40    ## 간격
        cnt2 = 80 ## 간격2
        
        ## 이미지 화면
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10+cnt, 1400, 1100))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        
        
        ## Auto Labeling 토글 버튼
        self.toglebtn = QtWidgets.QPushButton(self.tab)
        self.toglebtn.setGeometry(QtCore.QRect(400+cnt2, 10, 200, 31))
        self.toglebtn.setObjectName("togle")
        self.toglebtn.clicked.connect(self.auto_togle)
        

        ## Load 버튼
        self.pushButton = QtWidgets.QPushButton(self.tab)
        self.pushButton.setGeometry(QtCore.QRect(910+cnt2, cnt-20, 121, 31))
        self.pushButton.setObjectName("load1")
        self.pushButton.clicked.connect(self.load_clicked)
        
        ## Clear 버튼 (labeling 초기화)
        self.pushButton_6 = QtWidgets.QPushButton(self.tab)
        self.pushButton_6.setGeometry(QtCore.QRect(910+cnt2, 30+cnt, 121, 31))
        self.pushButton_6.setObjectName("clear")
        self.pushButton_6.clicked.connect(self.clearRectItems)
        
        ## 라벨 버튼 (추후에 변환 예정)
        self.pushButton_5 = QtWidgets.QPushButton(self.tab)
        self.pushButton_5.setGeometry(QtCore.QRect(910+cnt2, 80+cnt, 121, 31))
        self.pushButton_5.setObjectName("Draw_box")
        self.pushButton_5.clicked.connect(self.onButtonClicked)
        
        ## Save 버튼
        self.pushButton_2 = QtWidgets.QPushButton(self.tab)
        self.pushButton_2.setGeometry(QtCore.QRect(910+cnt2, 130+cnt, 121, 31))
        self.pushButton_2.setObjectName("save1")
        self.pushButton_2.clicked.connect(self.save_clicked)
        
        ## 다음 파일로 넘어가는 버튼
        self.pushButton_3 = QtWidgets.QPushButton(self.tab)
        self.pushButton_3.setGeometry(QtCore.QRect(910+cnt2, 180+cnt, 121, 31))
        self.pushButton_3.setObjectName("next1")
        self.pushButton_3.clicked.connect(self.next_clicked)
        
        ## 파일 뒤로가기 버튼
        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setGeometry(QtCore.QRect(910+cnt2, 230+cnt, 121, 31))
        self.pushButton_4.setObjectName("back1")
        self.pushButton_4.clicked.connect(self.back_clicked)
        
        self.label = DraggableGraphicsView(self.tab)
        self.label.setGeometry(QtCore.QRect(30, 50, 561, 511))
        self.label.setObjectName("label")
        
        ## Class List dir 불러오기
        self.pushButton_9 = QtWidgets.QPushButton(self.tab)
        self.pushButton_9.setGeometry(QtCore.QRect(910+cnt2, 280+cnt, 121, 31))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.clist_load)
        
        ## Class List Label
        self.label2 = QtWidgets.QLabel(self.tab)
        self.label2.setGeometry(QtCore.QRect(915+cnt2, 370, 151, 30))
        self.label2.setObjectName("label2")
        self.label2.setFont(QtGui.QFont("궁서",10)) #폰트,크기 조절
        
        ## 이미지 파일과 동일한 폴더에 있는 파일 리스트 불러오기
        self.listWidget = QtWidgets.QListWidget(self.tab)
        self.listWidget.setGeometry(QtCore.QRect(910+cnt2, 400, 121, 480))
        self.listWidget.setObjectName("listWidget")
        self.listWidget.itemClicked.connect(self.list_clicked)
        
        self.label3 = QtWidgets.QLabel(self.tab)
        self.label3.setGeometry(QtCore.QRect(710+cnt2, 15, 200, 25))
        self.label3.setObjectName("label3")
        
        self.label3.setFont(QtGui.QFont("궁서",10)) #폰트,크기 조절
        
        self.label4 = QtWidgets.QLabel(self.tab)
        self.label4.setGeometry(QtCore.QRect(650+cnt2, 45, 200, 30))
        self.label4.setObjectName("label4")
        
        self.label4.setFont(QtGui.QFont("바탕",8)) #폰트,크기 조절
        
        self.listWidget2 = QtWidgets.QListWidget(self.tab)
        self.listWidget2.setGeometry(QtCore.QRect(620+cnt2, 70, 250, 730+cnt2))
        self.listWidget2.setObjectName("listWidget")
        self.listWidget2.doubleClicked.connect(self.file_list_fun)
        
        self.textWidget = QPlainTextEdit(self.tab)
        self.textWidget.setGeometry(QtCore.QRect(30, 550+cnt2+70, 560+cnt2, 180))
        # self.textWidget.setPlainText('log')
        
        ######################################## tab2 (미구현) #############################################
        self.t2_pushButton = QtWidgets.QPushButton(self.tab_2)
        self.t2_pushButton.setGeometry(QtCore.QRect(910, cnt-20, 121, 31))
        self.t2_pushButton.setObjectName("load1")
        self.t2_pushButton.clicked.connect(self.load_clicked)
        
        self.t2_pushButton_6 = QtWidgets.QPushButton(self.tab_2)
        self.t2_pushButton_6.setGeometry(QtCore.QRect(910, 30+cnt, 121, 31))
        self.t2_pushButton_6.setObjectName("clear")
        self.t2_pushButton_6.clicked.connect(self.clearRectItems)
    
        
        self.t2_pushButton_2 = QtWidgets.QPushButton(self.tab_2)
        self.t2_pushButton_2.setGeometry(QtCore.QRect(910, 130+cnt, 121, 31))
        self.t2_pushButton_2.setObjectName("save1")
        self.t2_pushButton_2.clicked.connect(self.save_clicked)
        
        self.t2_pushButton_3 = QtWidgets.QPushButton(self.tab_2)
        self.t2_pushButton_3.setGeometry(QtCore.QRect(910, 180+cnt, 121, 31))
        self.t2_pushButton_3.setObjectName("next1")
        self.t2_pushButton_3.clicked.connect(self.next_clicked)
        
        self.t2_pushButton_4 = QtWidgets.QPushButton(self.tab_2)
        self.t2_pushButton_4.setGeometry(QtCore.QRect(910, 230+cnt, 121, 31))
        self.t2_pushButton_4.setObjectName("back1")
        self.t2_pushButton_4.clicked.connect(self.back_clicked)
        self.t2_label = DraggableGraphicsView(self.tab_2)
        self.t2_label.setGeometry(QtCore.QRect(30, 50, 561, 511))
        self.t2_label.setObjectName("label")
        self.t2_pushButton_9 = QtWidgets.QPushButton(self.tab_2)
        self.t2_pushButton_9.setGeometry(QtCore.QRect(910, 280+cnt, 121, 31))
        self.t2_pushButton_9.setObjectName("t2_pushButton_9")
        self.t2_pushButton_9.clicked.connect(self.clist_load)
        
        
        self.t2_label2 = QtWidgets.QLabel(self.tab_2)
        self.t2_label2.setGeometry(QtCore.QRect(915, 370, 121, 30))
        self.t2_label2.setObjectName("label2")
        
        self.t2_label2.setFont(QtGui.QFont("궁서",10)) #폰트,크기 조절
        
        self.t2_listWidget = QtWidgets.QListWidget(self.tab_2)
        self.t2_listWidget.setGeometry(QtCore.QRect(910, 400, 121, 330))
        self.t2_listWidget.setObjectName("t2_listWidget")
        self.t2_listWidget.itemClicked.connect(self.list_clicked)
        
        self.t2_label3 = QtWidgets.QLabel(self.tab_2)
        self.t2_label3.setGeometry(QtCore.QRect(710, 15, 200, 25))
        self.t2_label3.setObjectName("t2_label3")
        
        self.t2_label3.setFont(QtGui.QFont("궁서",10)) #폰트,크기 조절
        
        self.t2_label4 = QtWidgets.QLabel(self.tab_2)
        self.t2_label4.setGeometry(QtCore.QRect(650, 45, 200, 25))
        self.t2_label4.setObjectName("label4")
        
        self.t2_label4.setFont(QtGui.QFont("바탕",8)) #폰트,크기 조절
        
        self.t2_listWidget2 = QtWidgets.QListWidget(self.tab_2)
        self.t2_listWidget2.setGeometry(QtCore.QRect(620, 70, 250, 660))
        self.t2_listWidget2.setObjectName("listWidget")
        self.t2_listWidget2.doubleClicked.connect(self.file_list_fun)
        
        self.t2_textWidget = QPlainTextEdit(self.tab_2)
        self.t2_textWidget.setGeometry(QtCore.QRect(30, 550, 480, 180))
        # self.textWidget.setPlainText('log')
        
        ######################################## tab2 (미구현) #############################################
        
        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "Load"))
        self.pushButton_2.setText(_translate("Dialog", "Save"))
        self.pushButton_3.setText(_translate("Dialog", "Next"))
        self.pushButton_4.setText(_translate("Dialog", "Back"))
        self.pushButton_5.setText(_translate("Dialog", "Draw_Box"))
        self.pushButton_9.setText(_translate("Dialog", "Class_dir"))
        self.pushButton_6.setText(_translate("Dialog", "Clear"))
        self.label3.setText('File List')
        self.label2.setText('Select Label')
        self.label4.setText(f'File Name :     {self.file_name}'   )
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "Tab 1"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "Tab 2"))
        
        self.t2_pushButton.setText(_translate("Dialog", "Load"))
        self.t2_pushButton_2.setText(_translate("Dialog", "Save"))
        self.t2_pushButton_3.setText(_translate("Dialog", "Next"))
        self.t2_pushButton_4.setText(_translate("Dialog", "Back"))
        self.t2_pushButton_9.setText(_translate("Dialog", "Class_dir"))
        self.t2_pushButton_6.setText(_translate("Dialog", "clearRectItems"))
        self.t2_label3.setText('File List')
        self.t2_label2.setText('Select Labell')
        self.t2_label4.setText(f'File Name :     {self.file_name}'   )
        self.toglebtn.setText(_translate("Dialog", f"{self.mode}"))
    
    
    ## Auto Labeling 클릭 버튼 클릭시, 텍스트 변환 & 모드 변환
    def auto_togle(self) :                               
        if self.mode == self.mode_off :
            self.mode = self.mode_on
        else :
            self.mode = self.mode_off
        self.toglebtn.setText(f"{self.mode}")
        
    def clearRectItems(self) :
        self.points = []
        self.label.clearRectItems()
        
     
    def file_list_fun(self) :
        self.fname = self.listWidget2.currentItem().text()   ## 이미지 파일 이름 얻기
        if self.fname[-3:] == 'jpg' or self.fname[-3:] == 'png' :
            img_path = f'{self.root_path}/{self.fname}'
            self.image_load_fun(img_path)
            self.label4.setText(f'File Name :     {self.fname}'   )
        else :
            self.textWidget.appendPlainText("이미지 파일을 선택해주세요")
    
    def image_load_fun(self,img_path) :
        self.img_path = img_path
        self.points = []
        self.flag = 0
        self.src_img = cv2.imread(img_path)
        self.path = f"{self.root_path}/labels/{(img_path.split('/')[-1])[:-4]}.txt"
        self.img = cv2.cvtColor(self.src_img,cv2.COLOR_RGB2BGR)
        self.img = cv2.resize(self.img,(self.h_size,self.w_size))
        h,w,c, = self.img.shape
        qImg=QtGui.QImage(self.img.data,w,h,w*c,QtGui.QImage.Format_RGB888)

        pixmap=QtGui.QPixmap.fromImage(qImg)
        self.label.pixmap_size(pixmap)
        self.label.setImage(pixmap)
        self.label.resize(pixmap.width(),pixmap.height())
        self.label.load_bbox(self.path)
 
        
    def load_clicked(self) :
        self.fname = QFileDialog.getOpenFileName()   ## 이미지 파일 이름 얻기
        if self.fname[0] :
            self.file_name = self.fname[0].split('/')[-1]
            self.root_path = self.fname[0].rstrip(self.file_name)  ## root_path를 가져온다
            self.image_load_fun(self.fname[0])
            self.flist = os.listdir(self.root_path)
            self.idx = self.flist.index(self.file_name)
            for idx,item in enumerate(self.flist) :
                self.listWidget2.insertItem(idx,item)
        else:
            self.textWidget.appendPlainText("먼저, 파일을 불러오세요")
           
            
    def clist_load(self) :
        # fname = QFileDialog.getExistingDirectory()   ## 라벨 폴더 경로 얻기
        fname = QFileDialog.getOpenFileName()[0]   ## 라벨 폴더 경로 얻기
        try :
            with open(fname, "r") as file:
                text = [line.strip() for line in file][0]
                parts = text.split(':')
                # get the second part, remove unnecessary characters and split by ','
                clist = parts[1].replace("[", "").replace("]", "").replace("'", "").split(',')
                # remove leading and trailing white spaces
                clist = [c.strip() for c in clist]
            file.close()
            self.listWidget.clear()
            if fname :
                self.clist = clist
                self.label.Clist(self.clist)
            for idx,item in enumerate(self.clist) :
                self.listWidget.insertItem(idx,item)
        except :
            print("올바른 라벨 파일을 선택해주세요")
            pass
            
    
    def list_clicked(self) :
        self.clss = self.listWidget.currentRow()
        self.listWidget2.setCurrentRow(self.idx)
        self.label.class_name(self.clss)
        
        
    def next_clicked(self) :
        if self.idx == len(self.flist) -1 :
            self.textWidget.appendPlainText("마지막 파일입니다.")
        while self.idx < len(self.flist)-1 :
            self.idx += 1
            self.listWidget2.setCurrentRow(self.idx)
            if self.flist[self.idx][-3:] == 'jpg' or self.flist[self.idx][-3:] == 'png' :
                img_path = f'{self.root_path}/{self.flist[self.idx]}'
                self.image_load_fun(img_path)
                self.label4.setText(f'File Name :     {self.flist[self.idx]}'   )
                self.file_name = self.flist[self.idx]
                break
        
                    
    def back_clicked(self) :
        if self.idx == 0:
            self.textWidget.appendPlainText("1번째 파일입니다.")
        while self.idx > 0  :
            self.idx -= 1
            self.listWidget2.setCurrentRow(self.idx)
            if self.idx >= 0 :
                if self.flist[self.idx][-3:] == 'jpg' or self.flist[self.idx][-3:] == 'png' :
                    img_path = f'{self.root_path}/{self.flist[self.idx]}'
                    self.image_load_fun(img_path)
                    self.label4.setText(f'File Name :     {self.flist[self.idx]}'   )
                    self.file_name = self.flist[self.idx]
                    break
                
    def keyPressEvent(self, e):
        print("key")
        if e.key() == Qt.Key_Escape:
            self.close()
        elif e.key() == Qt.Key_F:
            self.showFullScreen()
        elif e.modifiers() & Qt.ControlModifier:
            if e.key() == Qt.Key_S:
                self.save_clicked()
        
    
    def save_clicked(self) :
        self.flag = 1
        if self.clss >= 0 :
            self.create_folder(self.root_path+f'/images/')
            self.create_folder(self.root_path+f'/labels/')
            ## 원본 이미지 저장
            cv2.imwrite(self.root_path+f'/images/{self.file_name}',self.src_img)
            self.textWidget.appendPlainText(f'image saved : {self.img_path}')
            ## label 정보 저장
            # label = open(f"{self.root_path}/labels/{self.file_name[:-4]}.txt", 'w')
            self.label.SaveRectItem(self.path)
            self.next_clicked()
            # self.textWidget.appendPlainText(self.clss,self.x, self.y, self.w, self.h)
        else :
            self.textWidget.appendPlainText("Class 정보를 입력해주세요")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
